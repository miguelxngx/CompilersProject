productions.Add("1", new Production("programa", new string[] {"program-heading", ";", "program-block", ".", }));
productions.Add("2", new Production("program-heading", new string[] {"program", "identifier", "opt-program-parameters", }));
productions.Add("3", new Production("opt-program-parameters", new string[] {"(", "program-parameters", ")", }));
productions.Add("4", new Production("opt-program-parameters", new string[] {"''", }));
productions.Add("5", new Production("program-parameters", new string[] {"identifier-list", }));
productions.Add("6", new Production("program-block", new string[] {"constant-declaration-part", "variable-declaration-part", "statement-part", }));
productions.Add("7", new Production("constant-declaration-part", new string[] {"constant", "constant-definition", ";", "more-constant-definition", }));
productions.Add("8", new Production("constant-declaration-part", new string[] {"''", }));
productions.Add("9", new Production("more-constant-definition", new string[] {"constant-definition", ";", "more-constant-definition", }));
productions.Add("10", new Production("more-constant-definition", new string[] {"''", }));
productions.Add("11", new Production("variable-declaration-part", new string[] {"var", "variable-declaration", ";", "more-variable-declaration", }));
productions.Add("12", new Production("variable-declaration-part", new string[] {"''", }));
productions.Add("13", new Production("more-variable-declaration", new string[] {"variable-declaration", ";", "more-variable-declaration", }));
productions.Add("14", new Production("more-variable-declaration", new string[] {"''", }));
productions.Add("15", new Production("variable-declaration", new string[] {"identifier-list", ":", "type", }));
productions.Add("16", new Production("statement-part", new string[] {"begin", "statement-sequence", "end", ".", }));
productions.Add("17", new Production("type", new string[] {"integer", }));
productions.Add("18", new Production("type", new string[] {"real", }));
productions.Add("19", new Production("type", new string[] {"boolean", }));
productions.Add("20", new Production("type", new string[] {"string", }));
productions.Add("21", new Production("identifier-list", new string[] {"identifier", "more-identifier", }));
productions.Add("22", new Production("more-identifier", new string[] {",", "identifier", "more-identifier", }));
productions.Add("23", new Production("more-identifier", new string[] {"''", }));
productions.Add("24", new Production("statement-sequence", new string[] {"statement", "more-statement", }));
productions.Add("25", new Production("more-statement", new string[] {";", "statement", "more-statement", }));
productions.Add("26", new Production("more-statement", new string[] {"''", }));
productions.Add("27", new Production("statement", new string[] {"simple-statement", }));
productions.Add("28", new Production("statement", new string[] {"structured-statement", }));
productions.Add("29", new Production("simple-statement", new string[] {"assignment-statement", }));
productions.Add("30", new Production("simple-statement", new string[] {"IO-statement", }));
productions.Add("31", new Production("simple-statement", new string[] {"''", }));
productions.Add("32", new Production("assignment-statement", new string[] {"identifier", ":=", "expression", }));
productions.Add("33", new Production("IO-statement", new string[] {"writeln-statement", }));
productions.Add("34", new Production("IO-statement", new string[] {"readln-statement", }));
productions.Add("35", new Production("writeln-statement", new string[] {"writeln", "(", "opt-element-list", ")", }));
productions.Add("36", new Production("opt-element-list", new string[] {"element-list", }));
productions.Add("37", new Production("opt-element-list", new string[] {"''", }));
productions.Add("38", new Production("element-list", new string[] {"element", "more-element", }));
productions.Add("39", new Production("more-element", new string[] {",", "element", "more-element", }));
productions.Add("40", new Production("more-element", new string[] {"''", }));
productions.Add("41", new Production("element", new string[] {"number", }));
productions.Add("42", new Production("element", new string[] {"string", }));
productions.Add("43", new Production("element", new string[] {"identifier", }));
productions.Add("44", new Production("readln-statement", new string[] {"readln", "opt-identifier-list", }));
productions.Add("45", new Production("opt-identifier-list", new string[] {"''", }));
productions.Add("46", new Production("opt-identifier-list", new string[] {"(", "identifier-list", ")", }));
productions.Add("47", new Production("structured-statement", new string[] {"compound-statement", }));
productions.Add("48", new Production("structured-statement", new string[] {"repetitive-statement", }));
productions.Add("49", new Production("structured-statement", new string[] {"conditional-statement", }));
productions.Add("50", new Production("compound-statement", new string[] {"begin", "statement-sequence", "end", ".", }));
productions.Add("51", new Production("repetitive-statement", new string[] {"while-statement", }));
productions.Add("52", new Production("repetitive-statement", new string[] {"repeat-stateexpressionment", }));
productions.Add("53", new Production("repetitive-statement", new string[] {"for-statement", }));
productions.Add("54", new Production("while-statement", new string[] {"while", "expression", "do", "statement", }));
productions.Add("55", new Production("repeat-statement", new string[] {"repeat", "statement-sequence", "until", "expression", }));
productions.Add("56", new Production("for-statement", new string[] {"for", "identifier", ":=", "expression", "to-downto", "expression", "do", "statement", }));
productions.Add("57", new Production("to-downto", new string[] {"to", }));
productions.Add("58", new Production("to-downto", new string[] {"downto", }));
productions.Add("59", new Production("conditional-statement", new string[] {"if", "expression", "then", "statement", "opt-else", }));
productions.Add("60", new Production("opt-else", new string[] {"else", "statement", }));
productions.Add("61", new Production("opt-else", new string[] {"''", }));
productions.Add("62", new Production("expression", new string[] {"simple-expression", "opt-rel-expression", }));
productions.Add("63", new Production("opt-rel-expression", new string[] {"relational-operator", "simple-expression", }));
productions.Add("64", new Production("opt-rel-expression", new string[] {"''", }));
productions.Add("65", new Production("simple-expression", new string[] {"opt-sign", "term", "more-add-term", }));
productions.Add("66", new Production("opt-sign", new string[] {"+", }));
productions.Add("67", new Production("opt-sign", new string[] {"-", }));
productions.Add("68", new Production("opt-sign", new string[] {"''", }));
productions.Add("69", new Production("more-add-term", new string[] {"addition-operator", "term", "more-add-term", }));
productions.Add("70", new Production("more-add-term", new string[] {"''", }));
productions.Add("71", new Production("term", new string[] {"factor", "more-mult-term", }));
productions.Add("72", new Production("more-mult-term", new string[] {"multiplication-operator", "factor", "more-mult-term", }));
productions.Add("73", new Production("more-mult-term", new string[] {"''", }));
productions.Add("74", new Production("factor", new string[] {"identifier", }));
productions.Add("75", new Production("factor", new string[] {"number", }));
productions.Add("76", new Production("factor", new string[] {"string", }));
productions.Add("77", new Production("factor", new string[] {"(", "expression", ")", }));
productions.Add("78", new Production("factor", new string[] {"not", "factor", }));
productions.Add("79", new Production("relational-operator", new string[] {"=", }));
productions.Add("80", new Production("relational-operator", new string[] {"<>", }));
productions.Add("81", new Production("relational-operator", new string[] {"<", }));
productions.Add("82", new Production("relational-operator", new string[] {"<=", }));
productions.Add("83", new Production("relational-operator", new string[] {">", }));
productions.Add("84", new Production("relational-operator", new string[] {">=", }));
productions.Add("85", new Production("addition-operator", new string[] {"+", }));
productions.Add("86", new Production("addition-operator", new string[] {"-", }));
productions.Add("87", new Production("addition-operator", new string[] {"or", }));
productions.Add("88", new Production("multiplication-operator", new string[] {"*", }));
productions.Add("89", new Production("multiplication-operator", new string[] {"/", }));
productions.Add("90", new Production("multiplication-operator", new string[] {"div", }));
productions.Add("91", new Production("multiplication-operator", new string[] {"mod", }));
productions.Add("92", new Production("multiplication-operator", new string[] {"and", }));
